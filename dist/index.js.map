{"version":3,"file":"index.js","sources":["../src/twitch-strategy.ts","../src/index.ts"],"sourcesContent":["import util from \"util\";\r\nimport OAuth2Strategy from \"passport-oauth2\";\r\nimport fetch from \"node-fetch\";\r\n\r\ninterface Options {\r\n    clientID: string;\r\n    clientSecret: string;\r\n    callbackURL: string;\r\n    scope: string;\r\n}\r\n/**\r\n * `Strategy` constructor.\r\n *\r\n * The Twitch authentication strategy authenticates requests by delegating to\r\n * Twitch using the OAuth 2.0 protocol.\r\n *\r\n * Applications must supply a `verify` callback which accepts an `accessToken`,\r\n * `refreshToken` and service-specific `profile`, and then calls the `done`\r\n * callback supplying a `user`, which should be set to `false` if the\r\n * credentials are not valid.  If an exception occured, `err` should be set.\r\n *\r\n * Options:\r\n *   - `clientID`      your Twitch application\"s client id\r\n *   - `clientSecret`  your Twitch application\"s client secret\r\n *   - `callbackURL`   URL to which Twitch will redirect the user after granting authorization\r\n *\r\n * Examples:\r\n *\r\n *     passport.use(new TwitchStrategy({\r\n *         clientID: \"123-456-789\",\r\n *         clientSecret: \"shhh-its-a-secret\"\r\n *         callbackURL: \"https://www.example.net/auth/twitch/callback\"\r\n *       },\r\n *       function(accessToken, refreshToken, profile, done) {\r\n *         User.findOrCreate(..., function (err, user) {\r\n *           done(err, user);\r\n *         });\r\n *       }\r\n *     ));\r\n *\r\n * @param {Object} options\r\n * @param {Function} verify\r\n * @api public\r\n */\r\nexport function Strategy(options: Options, verify: Function) {\r\n    const params = {\r\n        ...options,\r\n        name: 'twitch',\r\n        authorizationURL: 'https://id.twitch.tv/oauth2/authorize',\r\n        tokenURL: 'https://id.twitch.tv/oauth2/token'\r\n    }\r\n    this.clientID = options.clientID;\r\n    OAuth2Strategy.call(this, params, verify);\r\n    this._oauth2.setAuthMethod(\"Bearer\");\r\n    this._oauth2.useAuthorizationHeaderforGET(true);\r\n}\r\n\r\nutil.inherits(Strategy, OAuth2Strategy);\r\n\r\n/**\r\n * Retrieve user profile from Twitch.\r\n *\r\n * This function constructs a normalized profile, with the following properties:\r\n *\r\n *   - `provider`         always set to `twitch`\r\n *   - `id`\r\n *   - `username`\r\n *   - `displayName`\r\n *\r\n * @param {String} accessToken\r\n * @param {Function} done\r\n * @api protected\r\n */\r\nStrategy.prototype.userProfile = function (accessToken: string, done: Function): Promise<void> {\r\n    return fetch('https://api.twitch.tv/helix/users', {\r\n        method: 'GET',\r\n        headers: {\r\n            'Client-ID': this.clientID,\r\n            'Accept': 'application/vnd.twitchtv.v5+json',\r\n            'Authorization': 'Bearer ' + accessToken\r\n        }\r\n    }).then(response => {\r\n        if (!response.ok) return new OAuth2Strategy.InternalOAuthError(\"failed to fetch user profile\");\r\n        else return response.json()\r\n    }).then(json => {\r\n        const body = json.data[0];\r\n        done(null, body);\r\n    }).catch(error => {\r\n        done(error, null);\r\n    });\r\n}\r\n\r\n/**\r\n * Return extra parameters to be included in the authorization request.\r\n *\r\n * @param {Object} options\r\n * @return {Object}\r\n * @api protected\r\n */\r\nStrategy.prototype.authorizationParams = function (options: { forceVerify: boolean }): object {\r\n    var params = {\r\n        force_verify: false\r\n    };\r\n    if (typeof options.forceVerify !== \"undefined\") {\r\n        params.force_verify = !!options.forceVerify;\r\n    }\r\n    return params;\r\n};","import { Strategy } from './twitch-strategy';\r\nimport pkginfo from 'pkginfo';\r\n\r\npkginfo(module, \"version\");\r\n\r\nconst OAuth2Strategy = Strategy;\r\nexport { Strategy, OAuth2Strategy };\r\n"],"names":["Strategy","options","verify","params","name","authorizationURL","tokenURL","this","clientID","OAuth2Strategy","call","_oauth2","setAuthMethod","useAuthorizationHeaderforGET","util","inherits","prototype","userProfile","accessToken","done","fetch","method","headers","Client-ID","Accept","Authorization","then","response","ok","json","InternalOAuthError","body","data","catch","error","authorizationParams","force_verify","forceVerify","pkginfo","module"],"mappings":"qRA4CgBA,EAASC,EAAkBC,GACvC,MAAMC,iCACCF,IACHG,KAAM,SACNC,iBAAkB,wCAClBC,SAAU,sCAEdC,KAAKC,SAAWP,EAAQO,SACxBC,UAAeC,KAAKH,KAAMJ,EAAQD,GAClCK,KAAKI,QAAQC,cAAc,UAC3BL,KAAKI,QAAQE,8BAA6B,GAG9CC,UAAKC,SAASf,EAAUS,WAgBxBT,EAASgB,UAAUC,YAAc,SAAUC,EAAqBC,GAC5D,OAAOC,UAAM,oCAAqC,CAC9CC,OAAQ,MACRC,QAAS,CACLC,YAAahB,KAAKC,SAClBgB,OAAU,mCACVC,cAAiB,UAAYP,KAElCQ,KAAKC,GACCA,EAASC,GACFD,EAASE,OADI,IAAIpB,UAAeqB,mBAAmB,iCAEhEJ,KAAKG,IACJ,MAAME,EAAOF,EAAKG,KAAK,GACvBb,EAAK,KAAMY,KACZE,MAAMC,IACLf,EAAKe,EAAO,SAWpBlC,EAASgB,UAAUmB,oBAAsB,SAAUlC,GAC/C,IAAIE,EAAS,CACTiC,cAAc,GAKlB,YAHmC,IAAxBnC,EAAQoC,cACflC,EAAOiC,eAAiBnC,EAAQoC,aAE7BlC,GCvGXmC,UAAQC,OAAQ,iBAEV9B,EAAiBT"}