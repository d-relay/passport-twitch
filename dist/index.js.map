{"version":3,"file":"index.js","sources":["../src/twitch-strategy.ts","../src/index.ts"],"sourcesContent":["import fetch from \"node-fetch\";\r\nimport OAuth2Strategy from \"passport-oauth2\";\r\n\r\nexport class Strategy extends OAuth2Strategy {\r\n    private clientID: string;\r\n    /**\r\n     * `Strategy` constructor.\r\n     *\r\n     * The Twitch authentication strategy authenticates requests by delegating to\r\n     * Twitch using the OAuth 2.0 protocol.\r\n     *\r\n     * Applications must supply a `verify` callback which accepts an `accessToken`,\r\n     * `refreshToken` and service-specific `profile`, and then calls the `done`\r\n     * callback supplying a `user`, which should be set to `false` if the\r\n     * credentials are not valid.  If an exception occured, `err` should be set.\r\n     *\r\n     * Options:\r\n     *   - `clientID`      your Twitch application\"s client id\r\n     *   - `clientSecret`  your Twitch application\"s client secret\r\n     *   - `callbackURL`   URL to which Twitch will redirect the user after granting authorization\r\n     *\r\n     * Examples:\r\n     *\r\n     *     passport.use(new TwitchStrategy({\r\n     *         clientID: \"123-456-789\",\r\n     *         clientSecret: \"shhh-its-a-secret\"\r\n     *         callbackURL: \"https://www.example.net/auth/twitch/callback\"\r\n     *       },\r\n     *       function(accessToken, refreshToken, profile, done) {\r\n     *         User.findOrCreate(..., function (err, user) {\r\n     *           done(err, user);\r\n     *         });\r\n     *       }\r\n     *     ));\r\n     *\r\n     * @param {OAuth2Strategy.StrategyOptionsBase} options\r\n     * @param {OAuth2Strategy.VerifyFunction | OAuth2Strategy.VerifyFunctionWithRequest} verify\r\n     * @api public\r\n     */\r\n    constructor(options: OAuth2Strategy._StrategyOptionsBase, verify: OAuth2Strategy.VerifyFunction | OAuth2Strategy.VerifyFunctionWithRequest) {\r\n        const params = {\r\n            ...options,\r\n            name: 'twitch',\r\n            authorizationURL: 'https://id.twitch.tv/oauth2/authorize',\r\n            tokenURL: 'https://id.twitch.tv/oauth2/token'\r\n        }\r\n        super(params, verify);\r\n        this.clientID = options.clientID;\r\n        this._oauth2.setAuthMethod('Bearer');\r\n        this._oauth2.useAuthorizationHeaderforGET(true);\r\n    }\r\n\r\n    /**\r\n     * Retrieve user profile from Twitch.\r\n     * This function constructs a normalized profile, with the following properties:\r\n     *   - `provider`         always set to `twitch`\r\n     *   - `id`\r\n     *   - `username`\r\n     *   - `displayName`\r\n     * @param {String} accessToken\r\n     * @param {Function} done\r\n     * @api protected\r\n     */\r\n    userProfile(accessToken: string, done: (err?: Error | null, profile?: any) => void) {\r\n        return fetch('https://api.twitch.tv/helix/users', {\r\n            method: 'GET',\r\n            headers: {\r\n                'Client-ID': this.clientID,\r\n                'Accept': 'application/vnd.twitchtv.v5+json',\r\n                'Authorization': 'Bearer ' + accessToken\r\n            }\r\n        }).then(response => {\r\n            if (!response.ok) throw new OAuth2Strategy.InternalOAuthError(\"failed to fetch user profile\", response);\r\n            else return response.json();\r\n        }).then(json => {\r\n            const body = json.data[0];\r\n            return done(null, body);\r\n        }).catch(error => {\r\n            return done(error, null);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Return extra parameters to be included in the authorization request.\r\n     * @param {Object} options\r\n     * @return {Object}\r\n     * @api protected\r\n     */\r\n    authorizationParams(options: { forceVerify?: boolean }): object {\r\n        return {\r\n            force_verify: (typeof options.forceVerify === 'boolean') ? false : options.forceVerify\r\n        };\r\n    }\r\n}\r\n\r\nexport default Strategy;","import { Strategy } from './twitch-strategy';\r\nimport pkginfo from 'pkginfo';\r\n\r\npkginfo(module, \"version\");\r\n\r\nconst OAuth2Strategy = Strategy;\r\nexport { Strategy, OAuth2Strategy };"],"names":["Strategy","OAuth2Strategy","[object Object]","options","verify","super","name","authorizationURL","tokenURL","this","clientID","_oauth2","setAuthMethod","useAuthorizationHeaderforGET","accessToken","done","fetch","method","headers","Client-ID","Accept","Authorization","then","response","ok","json","InternalOAuthError","body","data","catch","error","force_verify","forceVerify","pkginfo","module"],"mappings":"yPAGaA,UAAiBC,UAoC1BC,YAAYC,EAA8CC,GAOtDC,qCALOF,IACHG,KAAM,SACNC,iBAAkB,wCAClBC,SAAU,sCAEAJ,GACdK,KAAKC,SAAWP,EAAQO,SACxBD,KAAKE,QAAQC,cAAc,UAC3BH,KAAKE,QAAQE,8BAA6B,GAc9CX,YAAYY,EAAqBC,GAC7B,OAAOC,UAAM,oCAAqC,CAC9CC,OAAQ,MACRC,QAAS,CACLC,YAAaV,KAAKC,SAClBU,OAAU,mCACVC,cAAiB,UAAYP,KAElCQ,KAAKC,IACJ,GAAKA,EAASC,GACT,OAAOD,EAASE,OADH,MAAM,IAAIxB,UAAeyB,mBAAmB,+BAAgCH,KAE/FD,KAAKG,IACJ,MAAME,EAAOF,EAAKG,KAAK,GACvB,OAAOb,EAAK,KAAMY,KACnBE,MAAMC,GACEf,EAAKe,EAAO,OAU3B5B,oBAAoBC,GAChB,MAAO,CACH4B,aAA8C,kBAAxB5B,EAAQ6B,aAAqC7B,EAAQ6B,cCvFvFC,UAAQC,OAAQ,iBAEVjC,EAAiBD"}