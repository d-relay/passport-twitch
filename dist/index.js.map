{"version":3,"file":"index.js","sources":["../src/twitch-strategy.ts","../src/index.ts"],"sourcesContent":["import util from \"util\";\nimport OAuth2Strategy from \"passport-oauth2\";\nimport fetch from \"node-fetch\";\n\ninterface Options {\n    clientID: string;\n    clientSecret: string;\n    callbackURL: string;\n    scope: string;\n}\n/**\n * `Strategy` constructor.\n *\n * The Twitch authentication strategy authenticates requests by delegating to\n * Twitch using the OAuth 2.0 protocol.\n *\n * Applications must supply a `verify` callback which accepts an `accessToken`,\n * `refreshToken` and service-specific `profile`, and then calls the `done`\n * callback supplying a `user`, which should be set to `false` if the\n * credentials are not valid.  If an exception occured, `err` should be set.\n *\n * Options:\n *   - `clientID`      your Twitch application\"s client id\n *   - `clientSecret`  your Twitch application\"s client secret\n *   - `callbackURL`   URL to which Twitch will redirect the user after granting authorization\n *\n * Examples:\n *\n *     passport.use(new TwitchStrategy({\n *         clientID: \"123-456-789\",\n *         clientSecret: \"shhh-its-a-secret\"\n *         callbackURL: \"https://www.example.net/auth/twitch/callback\"\n *       },\n *       function(accessToken, refreshToken, profile, done) {\n *         User.findOrCreate(..., function (err, user) {\n *           done(err, user);\n *         });\n *       }\n *     ));\n *\n * @param {Object} options\n * @param {Function} verify\n * @api public\n */\nexport function Strategy(options: Options, verify: Function) {\n    const params = {\n        ...options,\n        name: 'twitch',\n        authorizationURL: 'https://id.twitch.tv/oauth2/authorize',\n        tokenURL: 'https://id.twitch.tv/oauth2/token'\n    }\n    this.clientID = options.clientID;\n    OAuth2Strategy.call(this, params, verify);\n    this._oauth2.setAuthMethod(\"Bearer\");\n    this._oauth2.useAuthorizationHeaderforGET(true);\n}\nutil.inherits(Strategy, OAuth2Strategy);\n\n/**\n * Retrieve user profile from Twitch.\n *\n * This function constructs a normalized profile, with the following properties:\n *\n *   - `provider`         always set to `twitch`\n *   - `id`\n *   - `username`\n *   - `displayName`\n *\n * @param {String} accessToken\n * @param {Function} done\n * @api protected\n */\nStrategy.prototype.userProfile = function (accessToken: string, done: Function): Promise<Function> {\n    return fetch('https://api.twitch.tv/helix/users', {\n        method: 'GET',\n        headers: {\n            'Client-ID': this.clientID,\n            'Accept': 'application/vnd.twitchtv.v5+json',\n            'Authorization': 'Bearer ' + accessToken\n        }\n    }).then(response => {\n        if (!response.ok) return new OAuth2Strategy.InternalOAuthError(\"failed to fetch user profile\");\n        else return response.json();\n    }).then(json => {\n        const body = json.data[0];\n        return done(null, body);\n    }).catch(error => {\n        return done(error, null);\n    });\n}\n\n/**\n * Return extra parameters to be included in the authorization request.\n *\n * @param {Object} options\n * @return {Object}\n * @api protected\n */\nStrategy.prototype.authorizationParams = function (options: { forceVerify: boolean }): object {\n    var params = {\n        force_verify: false\n    };\n    if (typeof options.forceVerify !== \"undefined\") {\n        params.force_verify = !!options.forceVerify;\n    }\n    return params;\n};\n\nexport default Strategy;","import { Strategy } from './twitch-strategy';\nimport pkginfo from 'pkginfo';\n\npkginfo(module, \"version\");\n\nconst OAuth2Strategy = Strategy;\nexport { Strategy, OAuth2Strategy };\n"],"names":["Strategy","options","verify","params","name","authorizationURL","tokenURL","this","clientID","OAuth2Strategy","call","_oauth2","setAuthMethod","useAuthorizationHeaderforGET","util","inherits","prototype","userProfile","accessToken","done","fetch","method","headers","Client-ID","Accept","Authorization","then","response","ok","json","InternalOAuthError","body","data","catch","error","authorizationParams","force_verify","forceVerify","pkginfo","module"],"mappings":"qRA4CgBA,EAASC,EAAkBC,GACvC,MAAMC,iCACCF,IACHG,KAAM,SACNC,iBAAkB,wCAClBC,SAAU,sCAEdC,KAAKC,SAAWP,EAAQO,SACxBC,UAAeC,KAAKH,KAAMJ,EAAQD,GAClCK,KAAKI,QAAQC,cAAc,UAC3BL,KAAKI,QAAQE,8BAA6B,GAE9CC,UAAKC,SAASf,EAAUS,WAgBxBT,EAASgB,UAAUC,YAAc,SAAUC,EAAqBC,GAC5D,OAAOC,UAAM,oCAAqC,CAC9CC,OAAQ,MACRC,QAAS,CACLC,YAAahB,KAAKC,SAClBgB,OAAU,mCACVC,cAAiB,UAAYP,KAElCQ,KAAKC,GACCA,EAASC,GACFD,EAASE,OADI,IAAIpB,UAAeqB,mBAAmB,iCAEhEJ,KAAKG,IACJ,MAAME,EAAOF,EAAKG,KAAK,GACvB,OAAOb,EAAK,KAAMY,KACnBE,MAAMC,GACEf,EAAKe,EAAO,QAW3BlC,EAASgB,UAAUmB,oBAAsB,SAAUlC,GAC/C,IAAIE,EAAS,CACTiC,cAAc,GAKlB,YAHmC,IAAxBnC,EAAQoC,cACflC,EAAOiC,eAAiBnC,EAAQoC,aAE7BlC,GCtGXmC,UAAQC,OAAQ,iBAEV9B,EAAiBT"}