{"version":3,"file":"index.js","sources":["../src/twitch-strategy.ts","../src/index.ts"],"sourcesContent":["import fetch from \"node-fetch\";\nimport OAuth2Strategy from \"passport-oauth2\";\n\ninterface Options {\n    clientID: string;\n    clientSecret: string;\n    callbackURL: string;\n    scope: string;\n}\n\nexport class Strategy extends OAuth2Strategy {\n    private clientID: string;\n    public name: string;\n    /**\n     * `Strategy` constructor.\n     *\n     * The Twitch authentication strategy authenticates requests by delegating to\n     * Twitch using the OAuth 2.0 protocol.\n     *\n     * Applications must supply a `verify` callback which accepts an `accessToken`,\n     * `refreshToken` and service-specific `profile`, and then calls the `done`\n     * callback supplying a `user`, which should be set to `false` if the\n     * credentials are not valid.  If an exception occured, `err` should be set.\n     *\n     * Options:\n     *   - `clientID`      your Twitch application\"s client id\n     *   - `clientSecret`  your Twitch application\"s client secret\n     *   - `callbackURL`   URL to which Twitch will redirect the user after granting authorization\n     *\n     * Examples:\n     *\n     *     passport.use(new TwitchStrategy({\n     *         clientID: \"123-456-789\",\n     *         clientSecret: \"shhh-its-a-secret\"\n     *         callbackURL: \"https://www.example.net/auth/twitch/callback\"\n     *       },\n     *       function(accessToken, refreshToken, profile, done) {\n     *         User.findOrCreate(..., function (err, user) {\n     *           done(err, user);\n     *         });\n     *       }\n     *     ));\n     *\n     * @param {Options} options\n     * @param {VerifyType} verify\n     */\n    constructor(options: Options, verify: OAuth2Strategy.VerifyFunction | OAuth2Strategy.VerifyFunctionWithRequest) {\n        const params: OAuth2Strategy._StrategyOptionsBase = {\n            ...options,\n            authorizationURL: 'https://id.twitch.tv/oauth2/authorize',\n            tokenURL: 'https://id.twitch.tv/oauth2/token'\n        }\n        super(params, verify);\n        this.name = 'twitch';\n        this.clientID = options.clientID;\n        this._oauth2.setAuthMethod('Bearer');\n        this._oauth2.useAuthorizationHeaderforGET(true);\n    }\n\n    /**\n     * Retrieve user profile from Twitch.\n     * This function constructs a normalized profile, with the following properties:\n     *   - `provider`         always set to `twitch`\n     *   - `id`\n     *   - `username`\n     *   - `displayName`\n     * @param {String} accessToken\n     * @param {Function} done\n     * @api protected\n     */\n    userProfile(accessToken: string, done: (err?: Error | null, profile?: any) => void) {\n        return fetch('https://api.twitch.tv/helix/users', {\n            method: 'GET',\n            headers: {\n                'Client-ID': this.clientID,\n                'Accept': 'application/vnd.twitchtv.v5+json',\n                'Authorization': 'Bearer ' + accessToken\n            }\n        }).then(response => {\n            if (!response.ok) throw new OAuth2Strategy.InternalOAuthError(\"failed to fetch user profile\", response);\n            else return response.json();\n        }).then(json => {\n            const body = json.data[0];\n            return done(null, body);\n        }).catch(error => {\n            return done(error, null);\n        });\n    }\n\n    /**\n     * Return extra parameters to be included in the authorization request.\n     * @param {Object} options\n     * @return {Object}\n     * @api protected\n     */\n    authorizationParams(options: { forceVerify?: boolean }): object {\n        return {\n            force_verify: (typeof options.forceVerify === 'boolean') ? false : options.forceVerify\n        };\n    }\n}\n\nexport default Strategy;","import { Strategy } from './twitch-strategy';\nimport pkginfo from 'pkginfo';\n\npkginfo(module, \"version\");\n\nconst OAuth2Strategy = Strategy;\nexport { Strategy, OAuth2Strategy };"],"names":["Strategy","OAuth2Strategy","[object Object]","options","verify","super","authorizationURL","tokenURL","this","name","clientID","_oauth2","setAuthMethod","useAuthorizationHeaderforGET","accessToken","done","fetch","method","headers","Client-ID","Accept","Authorization","then","response","ok","json","InternalOAuthError","body","data","catch","error","force_verify","forceVerify","pkginfo","module"],"mappings":"yPAUaA,UAAiBC,UAoC1BC,YAAYC,EAAkBC,GAM1BC,qCAJOF,IACHG,iBAAkB,wCAClBC,SAAU,sCAEAH,GACdI,KAAKC,KAAO,SACZD,KAAKE,SAAWP,EAAQO,SACxBF,KAAKG,QAAQC,cAAc,UAC3BJ,KAAKG,QAAQE,8BAA6B,GAc9CX,YAAYY,EAAqBC,GAC7B,OAAOC,UAAM,oCAAqC,CAC9CC,OAAQ,MACRC,QAAS,CACLC,YAAaX,KAAKE,SAClBU,OAAU,mCACVC,cAAiB,UAAYP,KAElCQ,KAAKC,IACJ,GAAKA,EAASC,GACT,OAAOD,EAASE,OADH,MAAM,IAAIxB,UAAeyB,mBAAmB,+BAAgCH,KAE/FD,KAAKG,IACJ,MAAME,EAAOF,EAAKG,KAAK,GACvB,OAAOb,EAAK,KAAMY,KACnBE,MAAMC,GACEf,EAAKe,EAAO,OAU3B5B,oBAAoBC,GAChB,MAAO,CACH4B,aAA8C,kBAAxB5B,EAAQ6B,aAAqC7B,EAAQ6B,cC9FvFC,UAAQC,OAAQ,iBAEVjC,EAAiBD"}